# jsp06

추후 일반적인 작업 순서

	1. 요청 설계
	2. 컨트롤러 제작
	3. 요청 mapping
	4. view 제작
	5. 질의명령 작성
	6. dao 작성
	7. 컨트롤러 작성
	
-----------------------------------------------------
Connection Pool
==> db에 접속하는 connection을 모아둔 것.
	
	웹서버(project whale의 경우 tomcat)이 시작될 때
	db가 제공하는 모든 connection을 미리 확보하고,
	필요할 때 웹서버가 이것들을 제공한다.
	
	따라서 요청할 때 마다 db에 접속하지 않고
	더 빠르게 db작업이 가능해진다.
	
Connection Pool의 의의
	db를 사용할 때 가장 시간이 많이 걸리는 db 접속 작업효율을 늘려준다.
	db 접속작업에 문제가 생기면 홈페이지의 응답속도가 느려진다.
	(따라서 트래픽이 증가할 경우 문제가 발생한다.)
	

Connection Pool - Web Sever 등록

	0. 	Connection Pool 작업을 지원하는 라이브러리 생성
	
	  ※	과거엔 Connection Pool을 위한 독립적인 라이브러리가 제공됐지만,
		1.6 version 이상부터는 jdbc 라이브러리와 통합되어 제공되고 있다.
		이전 버전 사용중이라면
			commons.dbcp-x.x.jar
			commons.pool-x.x.jar		파일을 따로 다운로드 시켜 줘야 함
			
	1. 환경설정 파일에 Connection Pool 지정
		방법1) server.xml 에 등록	: db 정보가 전역으로 설정되어, 지양한다.
			<GlobalNamingResource>
				설정기술 . . .
			</GlobalNamingResource>
			
		방법2) context.xml 에 등록	: 역시 전역설정된다.
			- 예시와 함께 설명
			<Resource
	    	name="jdbc/TestDB"
	    		==> JSP에서 이 Connection Pool을 사용할 때 구분할 이름
	    			(unique 값)
	    		
	    	autho="Container"
	    		==>	등록된 자원을 관리하는 객체 이름.
	    			반드시 "Container"라고 기입해 줘야 한다.
	    			
	    	type="javax.sql.DataSource"
	    		==> 등록할 자원을 관리할 Classの名前
	    		
	    	maxTotal="8"
	    		==> 최대 확보할 커넥션 수
	    		
	    	maxIdle="2"
	    		==> 최소 확보할 응급 커넥션 수
	    		
	    	maxWaitMillis="10000"
	    		==> 누군가 요청했는데 Connection이 부족할경우 대기시간 설정
	    		
	    	(jdbc와 동일한 것들)
	    	username="ez"
	    	password="pw"
	    	driverClassName="oracle.jdbc.driver.OracleDriver"
	    	url="jdbc:oracle:thin:@localhost:1521:xe"
	    	/>
	    	
--------------------------------------------------------------------------
ひとりごと～
	request 객체 	: 해당 클라이언트의 요청 정보를 담음
	session 객체 	: 서버가 기억하는 클라이언트와의 연결 정보
					  (매우 민감한 정보기 때문에 잘 쓰지 않는다.)
					  
	attribute 		: 속성
					  ex.
					  	public void service(HttpServletRequest req, HttpServletResponse resp);
					  		가 있을 때
					  	
					  	req.setAttribute("SID", id);
					  	==> 해당 클라이언트의 request 객체의
					  		속성 "SID" 값을 id로 설정
					  		
					  	  +	request 객체 = 요청정보라는 것을 기억하자.
					  	  	'요청 정보'에 대한 속성을 추가/변경해 주는 것이다.
						
						req.getSession().setAttribute("SID", id);
						==> 하나하나 분리해서 정리해보자.
						
								req.getSession()
							
							함수를 실행시킨 request 객체의 정보를 기억한 session을 불러온다.
							(요청정보엔 클라이언트의 정보도 포함되어있다.)
							
								req.getSession().setAttribute("SID", id)
							
							해당 session의 속성 "SID"를 id라는 값으로 설정한다.
							
							즉,
								req.getSession().setAttribute()	함수는
							함수를 호출시킨 클라이언트의
							'서버가 기억하는 정보'에 대한 속성을 추가/변경 해주는 것이다!
							
							
							
	forward? redirect?
	
		forward		: 대신해줄 뷰로 보여질 특정 페이지를 로딩해준다.
					  주로 요청 처리 함수의 성공 결과로 데이터를 넘겨줄 때 많이 쓰인다.
					  따라서 클라이언트에게 보여지는 url도 변하지 않는다.
					  
		redirect	: 강제로 다른 요청으로 대체시킨다.
					  데이터가 보존되지 않고 소실되며,
					  클라이언트에게 보여지는 url 또한 변경된다.