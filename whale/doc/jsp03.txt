# jsp03

내장객체의 영역
==> 내장객체를 이용하면
	서버 스스로가 필요한 데이터를 보관했다가 사용할 수 있게 된다.

	Java 변수로 기억시킬 경우, 대부분 지역변수로 생성되기에
	내장객체를 활용하는 것을 선호한다.
	
	이러한 내장객체들은, 무엇을 이용해 데이터를 기억했는가에 따라
	데이터를 사용할 수 있는 영역이 달라지는데,
	이것을 내장객체의 영역이라고 한다.
	
	ex.
		request.setAttribute();
		==> 요청이 유지되는 상태에서는 데이터 이용 가능
		
		session.setAttribute();
		==> 세션이 유지되는 상태에서는 데이터 이용 가능
		
		
	1) pageContext
	==> 같은 문서에만 그 데이터를 사용할 수 있다.
			<% int num = 300000; %>
		이렇게 변수를 만들면 service 함수 내에 num이라는 변수가 생기므로 지역변수가 됨.
		
		선언자 방식으로
			<%! int num = 10 %>
		이렇게 만들면 jsp 파일 -> 클래스 파일로 변환 될 때
		맴버 변수로써 만들어지므로, 해당 페이지에서만 사용할 수 있게 된다.
		(변수로 기억하는것과 동일하기에, 별로 사용하지 않는다)
		
		
***	2) request
	==> 같은 요청을 유지한 문서에서 데이터 사용 가능
	
***	3) session
	==> 같은 세션을 유지한 문서에서 데이터 사용 가능
	
	4) application
	==> 같은 서버를 사용하는 문서에서 데이터 사용 가능.
		웹서버는 다른 클라이언트의 요청과 무관하게
		한 클라이언트가 요청한 문제점을 해결한다.
		때문에, 모든 문서에서 동일한 데이터를 사용할 일은 걱정할 필요 X
		
	  +	setAttribute("키값", 데이터);
	  	==> Map 처럼 데이터를 입력하면 된다.
	  		이 때 입력되는 데이터는 Object 타입으로 자동 형변환 된다.
	  		
	  	데이터를 꺼낼땐 getAttribute("키값");
	  	==> 꺼내줄 때도 Map 처럼 해주면 된다.
	  		자동 형변환 된 상태이기에, 원래 형태로의 형변환이 필요하다.
	  		
	  ※	parameter를 입력하는 함수는 존재하지 않는다!
	  
-------------------------------------------------------------------------------------------------

액션 태그
==> 자주 사용하는 Java 적인 기능을 html 처럼 태그 방식으로 사용하게 만든 명령이다.

	1. forward 를 액션태그
		형식1)
			<jsp:forward page="대신응답할문서경로"/>
		또는
			<jsp:forward page="대신응답할문서경로"></jsp:forward>
		
		형식2)
			<jsp:forward page="대신응답할문서경로">
				<jsp:param name="키값" value="데이터" scope="???" />
			</jsp:forward>
		
		==> 보여줄 페이지를 변경하며 부가정보를 알려준다.
			
	
	2. 다른 문서를 포함시키는 기능을 가진 액션 태그
		(<%@ include file="???" %> 와 같은 역할을 하는 태그)
		
		<jsp:include page="합칠문서경로" />
		
		  ※	<%@ include file="합칠문서경로" %>와 차이
		  	jsp 명령	: 문서 내용을 합치고, 클리스로 만든 뒤 컴파일 
		  	액션태그	: 문서들을 각각 클래스를 만들어 실행 후, 결과만 합침
		  				  각각 컴파일 되기에, 충동 염려가 없다.
		  				  
---------------------------------------------------------------------------------------------

JSTL (Java Standard Tag Library)
==> JSP는 html기반, 태그를 이용한 작업이 우선시 되므로
	Java 적인 요소 역시 태그형식으로 사용할 수 있도록,
	통일된 방식으로 문서를 만들게 만들어놓은 라이브러리다.
	
	ex.
	<%
		for(int i=0; i<10; i++{
	%>
		반복되어 만들어질 태그들 입력
	<%
		}
	%>
		같은 명령이 있다면
		
	<c:forEach begin="1" end="10" step="1">
		반복되어 만들어질 태그들 입력
	</c:forEach>
					이렇게 할 수 있다!!
					
	이렇게도 가능쓰
	<c:forEach var="data" items="${ARR}">
		태그들. . .
		${data}
		태그들. . .
	</c:forEach>
	
	
JSTL 사용 방법
 1.	JSTL 라이브러리 다운, 프로젝트의 WEB-INF/lib 폴더에 붙여넣기
	jstl.jar, jstl-api.jar 파일. 두개의 파일을 다운받아야 한다.
	(이 파일에 저장하면 자동으로 jar파일이 업로드 된다!)
	
 2.	JSTL이 필요한 JSP문서에 5가지 중 필요한 라이브러리를 사용할 수 있게 등록.
 	(모든 JSP 문서에, 매번 해줘야 함)
 	형식 :
 		<%@ taglib prefix="" uri=""%>
 		
 	prefix(접두어) :taglib는 누군가 만들어놓은 태그를 사용하게 하는 명령인데,
 					오픈소스인 Java가 태그 명이 중복이 될 수도 있다.
 					prefix는 이것을 방지하는 역할을 하기 때문에, 어떤 값이 들어와도 괜찮다.
 					
 	uri			  :	해당 태그 라이브러릴르 제공하는 CDN 네트워크의 경로
 					or 태그 라이브러리 기능을 제공하는 클래스 이름을 지정한다.
 					
 	ex.
 		<str></str> 태그가 있다.
 		제작자 A : 문자열 출력 (prefix="a")
 		제작자 B : 문자열 기억 (prefix="b")
 		
 		사용자 입장
 			<a:str></a:str>	==> 문자열 출력 기능을 하게 된다.
 			
JSTL의 종류

***	1. Core Tag
	==> 일반적인 Java 명령을 Tag로 만들어 놓은 라이브러리
	
	2. Formatting Tag
	==> 출력할 때 모양을 지정하기 위한 기능을 Tag로 만들어 놓은 라이브러리
	
  *	3. Function Tag
	==> Java에서 자주 사용하는 함수를 쓸 수 있게 한 라이브러리
	
	4. SQL Tag
	==> db를 사용할 때 필요한 기능을 Tag로 만들어놓은 라이브러리
	
	5. XML Tag
	==> xml 문서 처리를 위하나 기능을 Tag로 만들어좋은 라이브러리
 	
 	
JSTL 종류에 따른 prefix의 일반적인 사용

***	1. Core Tag
		<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
		
	2. Formatting Tag
		<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
	
  *	3. Function Tag
		<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
		
	4. SQL Tag
		<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %>
	
	5. XML Tag
		<%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml" %>
		
--------------------------------------------------------------------------------------------
표현 언어(Expression Language : EL, 표현식)

	${출력할 내용}
	
	내용을 화면에 출력한다. 변수, 연산식, 함수 등 모든 것이 올 수 있고,
	<%=  %>와 똑같다.
	
  ※ EL 객체에서의 VO 객체 이용
  	EL 객체에서 VO 통째로 뷰에 전달할 수 있는데,
  	만약 컨트롤러에서
  		req.setAttribute("DATA", mVO);		를 해준다면
  	
  	뷰에서 회원 번호를 출력할 때
  		${DATA.mno}
  	로 vo 속 변수를 기술해 꺼낼 수 있다
  	자동으로 Getter 함수가 호출되어, 따로 함수를 쓰지 않아도 된다.
  	(원칙은 ${sessionScope.키값} 이다)
  	
  	  +	${데이터} 에서 데이터부분에 바로 사용할 수 있는 것
  	  		1. request 객체의 속성
  	  		2. session 객체의 속성

  	  		
내장객체
	
	pageScope
	==> Page 영역에 존재하는 객체를 참조
	
***	requestScope
	==> Request 영역에 존재하는 객체를 참조
	
***	sessionScope
	==> Session 영역에 존재하는 객체를 참조
	
	applicationScope
	==> Application 영역에 존재하는 객체를 참조
	
	
 **	param
	==> 파라미터 값을 출력할 때 사용
	
 **	paramValues
	==> 파라미터 값을 배열로 꺼낼 때 사용
	
	
	header
	==> Header 정보를 얻어올 때 사용
	
	headerValues
	==> Header 정보를 배열로 얻어올 때 사용
	
	
  *	cookie
	==> 쿠키 객체를 참조
	
	initParam
	==> context의 초기화 파라미터를 의미
	
	pageContext
	==> PageContext 객체를 참조
	
	  +	EL 객체 중, requestScope와 sessionScope에 기억된 데이터는
	  	소속 생략해도 무방!
	  	
	  	
--------------------------------------------------------------------------------------------
<c:out>
==> 표현식과 동일하게, 뭔가 출력하는 기능을 가진 태그

	<c:out value="출력내용" />
	
	ex.
		req.setAttribute("NAME", "renjun")	이렇게 기억을 했다면
		
	뷰에서 <c:out value="${NAME}" />	로 출력할 수 있다.
	
	장점
		동시에 여러개를 출력할 수 있다. (자동으로 문자열 결합을 해준다)
		ex.
			<c:out value="${'<tag>, 10'}"/>
		==>	<tag>, 10 으로 출력됨


<c:set>
==> 변수에 데이터를 기억해놓는 기능을 가진 태그
	
	<c:set var="변수이름" value="데이터" />
	
	ex.
		<c:set var="name" value="renjun" />		이면
		String name = 'renjun'; 				과 동일하다!
		데이터 타입은 무관하지만, 따옴표는 꼭 붙여줘야 한다.
		

<c:remove>
==> 변수의 데이터를 강제로 삭제하는 기능을 가진 태그
	
	<c:remove var="변수이름" />
	
*****
<c:if>
==> Java의 if 문의 기능을 태그로 만든 것

	<c:if test="조건식">
		태그 혹은 내용			==> 참일 경우 보여진다.
	</c:if>
	
	  ※	아직 else, else if문에 대한 태그는 만들어지지 않았다.
	  	다중조건식을 사용해야 한다면, c:if 태그를 여러번 나열하면 된다.
	  	
	***	JSTL 연산자
		JSTL에서 조건식을 만들 때, Java에서 사용하는 조건 연산자를 쓸 수 있고,
		JSTL 연산자도 쓸 수 있다.
		
			eq ==
			lt <
			le <=
			gt >
			ge >=
			ne !=
			
			and &&
			or  ||
			not !
			
			empty	데이터가 비어있느냐(true, false)
			
		ex.
			ArrayList list = dao.getList();
			req.setAttribute("LIST", list);		라는 Java 명령이 있을 때
			
			<c:if test="${empty LIST}">
				<h2>회원들이 존재하지 않습니다.</h2>
			</c:if>								라는 JSP 명령이 있으면
			
			list 안이 비어있을 때 h2태그가 출력된다.
			
*****
<c:choose>
==> Java의 switch case와 유사한 기능을 가진, 다중 조건 처리명령을 위한 태그

	<c:choose>
		<c:when test="조건식1">
			처리내용1
		</c:when>
		<c:when test="조건식2">
			처리내용2
		</c:when>
		. . .
	/c:choose>
	  +	c:when 태그 중 하나라도 맞는게 있으면 그것만 처리하고 c:choose 태그는 종료된다.
	  
*****
<c:forEach>
==> Java의 for 명령을 태그로 만들어 놓았다.

	형식1)
		<c:forEach var="변수이름" begin="시작값" end="종료값" step="증감값">
			처리내용
			(카운터 변수를 사용할 때는 ${위에서입력한변수이름} 으로 사용한다)
		</c:forEach>
	
	  *	end 속성값은 == 개념이다. end 값까지 반복하고 종료됨.
	  +	step이 1인 경우 생략해도 무방.
	  
	 형식2)
	 	<c:forEach var="변수이름" items="${컬렉션or배열}">
	 		${변수이름}
	 	</c:forEach>
	 	
	 	Java에서 for Each 명령에 해당하며,
	 	컬렉션이나 배열의 내용을 변수에 한 개씩 꺼내고 기억시켜서
	 	데이터 개수만큼 반복해 처리한다.
	 	
 	  +	varStatus
 	  	for Each 태그는 varStatus 라는 속성을 사용할 수 있는데,
 	  	이 속성은 반복상태를 기억한다.
 	  	
 	  	반복상태 속성값
 	  	
 	  		current	: 현재 꺼낸 데이터가 기억
 	  		index	: 현재 몇번째 반복인지 기억 (0부터 카운트)
 	  		count	: 현재 반복 회차를 기억 (1부터 카운트)
 	  		first	: 현재 반복이 첫 반복인지 (true/false)
 	  		last	: 현재 반복이 마지막 반복인지 (true/false)
 	  		begin	: 시작값
 	  		end		: 종료값
 	  		step	: 증감값을 기억
 	  		
 	  	${변수.current}
 	  	${변수.count}		등으로 꺼내 사용할 수 있다.
 	  	
 	  	
<c:forTokens>
==> 하나의 문자열을 지정한 기호로 분리시켜, 반복한다.
	Java의 StringTokenizer 와 비슷한 역할
	
	<c:forTokens var="변수" items="데이터" delims="구분자">	-> 여러 구분자를 동시에 쓸수도 있음!
	</c:forTokens>
	
	
<c:redirect>
==> 강제로 요청을 변경하는 response.sendRedirect()에 해당하는 태그

	형식1)
		<c:redirect url="새로운요청" />
	==> 일반적인 요청만 바꿈
	
	형식2)
		<c:redirect url="새로운요청">
			<c:param name="키값 value="데이터" />
			<c:param name="키값 value="데이터" />
			. . .
		</c:redirect>
		
	==> 요청을 하면서 부가정보를 동시에 제공 (GET방식)
	
  +	Redirect될 페이지에서 POST 방식으로 부가정보를 추가, 요청하는 법
  
  		1. form Tag 생성 (method, action, name, id 모두 작성)
  		2. form Tag 내부, 전달할 데이터가 입력된 input Tag 생성
  			(타입은 hidden)
  		3. javaScript에서 body Tag가 완성되면 위에서 만든 form 태그 전송
  		
  	ex.
  		컨트롤러에서
  			req.setAttribute("DATA", mvo);		로 지정하고
  			
  		JSP에서
  		<body>
  		<script type="text/javascript">
  			$(document).ready(function(){
  				$('#frm').submit();
  			});
  		</script>
  			<form method="POST" action="redirect할주소" name="frm" id="frm">
  				<input type="hidden" name="mno" value="${DATA.mno}">
  				<input type="hidden" name="id" value="${DATA.id}">
  				<input type="hidden" name="name" value="${DATA.name}">
  				<input type="hidden" name="ano" value="${DATA.ano}">
  			</form>
  		</body>