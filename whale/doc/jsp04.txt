# jsp04

JSP 작업순서

	0. 요청 설계
	1. 뷰 생성
	2. 뷰 띄울 컨트롤러 작성
	3. 질의명렁 작성
	4. Dao 함수 작성
	5. 컨트롤러에서 받아서 처리
	
------------------------------------------------------------
MVC Pattern
==> Web 문서를 만드는, 발전된 기술 중 하나.
	중간에 WAS(Web Application Server) 서버를 이용해 분산처리 하는 기술.
	
	JSP 문서가 실행되는 순서
		1. Dispatch 시킨다 : 서버가 클라이언트의 요청을 분석해 해당 문서 실행
		2. 데이터 처리	   : JSP가 뭔갈 실행해 데이터 생산
		3. 클라이언트에게 응답문서 작성
		4. 응답
		
	이 과정을 서버 혼자가 담당한다.
	(중간에 자동적으로 Thread 처리하여, 여러 클라이언트를 동시에 응답하는 체계다.)
	==> 접속률이 높으면 서버가 다운된다!
	
	MVC Pattern은 트래픽에 따른 서버 다운 현상을
	서버 크기는 유지하면서 해결하기 위한 분산처리 시스템이다.
	
	  +	분산시스템의 의의
	  	컴퓨터에서 프로그램을 실행할 때
	  	해당 프로그램에 컴퓨터가 가진 모든 자원을 제공하진 않는다.
	  	컴퓨터가 아무리 좋아도 서버가 100% 사용할 수 있는것은 아니란 것.
	  	
	  	분산시스템은
	  	여러 개의 프로그램을 동시 실행해 각각 일을 전담시킴으로써
	  	시스템이 자원을 사용하는 비율을 늘리고,
	  	프로그램 각각이 하는 일(프로그램 부하)을 줄이는 데에 의의가 있다.
	  	
	  +	여러가지 용어
		Model 		: 생산된 데이터를 관리하는 기능을 담당하는 것
				  	  (or controller-view 사이 데이터를 주고 받는 기능)
				  	  or 데이터 그 자체
				  	  
		View		: 생성된 데이터를 이용해 응답문서를 작성하는 기능
		
		Controller	: 클라이언트의 요청에 따라 문제를 해결하는 기능
					  (데이터 생산 기능 담당)
					  
		  +	Controller의 기능
		  	1. Dispatch Controller
		  	==> 서버를 대신해 요청을 분석하여, 실행 문서를 선택하는 컨트롤러
		  		(Servlet으로 제작하게 됨)
		  		
		  	2. Normal Controller
		  	==> 일반 Java class로 작성
		  	
		  	3. View
		  	==> 응답문서인 view는 html로 만들어야 하므로, html기반인 JSP를 사용
		  	
--------------------------------------------------------------------------
Servlet
==> JSP 문서가 Java class로 변환된 클래스를 Servlet 클래스라고 한다.

	만약 우리가 Servlet을 직접 만들 수 있다면,
	서버 입장에선 JSP 문서의 변환작업이 줄어들기 때문에 처리속도가 감소한다.
	
Servlet 클래스 생성방법

	1. HttpServlet 클래스 상속
	2. 4개의 함수 Override
	
		public void init() throws ServletException {}
		==> 후술할 생존주기 주석의 init 시점에서 실행되는 함수.
		
		protected void doGet(HttpServletRequest req, HttpServeltResponse resp)
			throws ServletException, IOExceptioin {}
		protected void doPost(HttpServletRequest req, HttpServeltResponse resp)
			throws ServletException, IOException {}
		==> 모든 service 시점에서 실행되는 함수.
			클라이언트에게 응답하는 내용을 작성한다.
			service 함수가 존재할 경우 우선순위에서 밀려나 실행되지 않는다.
			
		public void destroy(){}
		==> destroy 시점에서 실행된다.
			이 부분에선 해당 클래스가 주로 사용하던 자원을 제거/반환을 목적으로 한다.
			

	3. 함수 각각에 기능 작성
	
		  +	서블릿 생존주기
		  
		  	init	: Servlet 클래스가 처음 만들어지는 시점
		  			  (서버 실행 후 첫 요청시점 딱 한번 실행됨)
		  	
		  	service	: 매 요청 시점
		  	
		  	destory	: 일정한 시간동안 요청이 전혀 없는 경우의 시점
		  			  (설정한 시간이 지나면 실행)
		  			  
		  			  
Servlet Class 실행방법
==> Web문서가 아니기 때문에, 원칙적으로 요청할 수 없다.
  ※	그래서 Servlet Class가 실행되도록, 요청을 등록해줘야 한다.
  
  		1. web.xml에 등록
  			- 서버에 Servlet 등록 : 서버 전역으로 등록
  			<servlet>
  				<servlet-name>loginAjax</servlet-name>
  				<servlet-class>만들어진 Servlet Class 경로</servlet-class>	==> 패키지 포함 전체경로 입력
  			</servlet>
  			
			- 요청 내용과 Servlet을 mapping 시킨다.
	  		==> 어떤 요청이 오면 위에 만든 Servlet을 실행시킬건지 등록
	  		
	  			<servlet-mapping>
	  				<servlet-name>Servlet이름</servelt-name>	==> 위에서 정의한 이름 사용
	  				<url-pattern>패턴정의</url-pattern>			==> 어떤 요청이 오면 실행할지 입력.
	  																* 을 이용해 전체처리를 할 수도 있음
	  			</servlet-mapping>
  		
 
  		2. Servlet Class의 annotation을 이용해 등록


------------------------------------------------------------------------------------------------
앞으로 볼 시험

index page 처리
1. myInfo 버튼을 클릭하면
	비동기 통신으로 내정보를 조회해서
	브라우저 하단에 내정보를 출력하도록 한다.
	출력내용은
		회원번호
		회원이름
		아이디
		메일
		전화번호
		가입일
		성별
		아바타이미지



 